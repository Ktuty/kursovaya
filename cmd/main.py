import os
import logging
import asyncio
import tempfile
import random
from pathlib import Path
from typing import Optional, List, Dict
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile
from aiogram.enums import ContentType
from aiogram.utils.keyboard import InlineKeyboardBuilder
import speech_recognition as sr
from pydub import AudioSegment
from gtts import gTTS
from configs.program_config import MODEL_DIR, TELEGRAM_TOKEN
from tools.neyro import ChatNeural  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à—É –º–æ–¥–µ–ª—å

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = TELEGRAM_TOKEN
MODEL_DIR = str(Path(__file__).parent / MODEL_DIR)
IMAGES_DIR = Path(__file__).parent / "images"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("../logs/bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class ProductDatabase:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    def __init__(self):
        self.products = self._load_products()

    def _load_products(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
        return [
            {
                "id": 1,
                "name": "Dell S2721DGF",
                "price": 45990,
                "discount_price": 42990,
                "description": "27-–¥—é–π–º–æ–≤—ã–π –∏–≥—Ä–æ–≤–æ–π –º–æ–Ω–∏—Ç–æ—Ä —Å QHD (2560x1440), 165Hz, IPS, AMD FreeSync Premium Pro",
                "features": ["165Hz", "1ms –æ—Ç–∫–ª–∏–∫", "HDR400", "–†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ –≤—ã—Å–æ—Ç—ã"],
                "best_for": "–≥–µ–π–º–µ—Ä–æ–≤ –∏ –∫–∏–±–µ—Ä—Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤",
                "image": "dell_s2721dgf.jpg",
                "promo_code": "DELL1000",
                "stores": ["DNS", "–°–∏—Ç–∏–ª–∏–Ω–∫", "–ú.–í–∏–¥–µ–æ"],
                "tags": ["–∏–≥—Ä—ã", "–≤—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞", "–±—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–ª–∏–∫"]
            },
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã...
        ]

    def get_product_by_id(self, product_id: int) -> Optional[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–≤–∞—Ä –ø–æ ID"""
        return next((p for p in self.products if p['id'] == product_id), None)

    def get_random_products(self, count: int = 2) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"""
        return random.sample(self.products, min(count, len(self.products)))

    def get_products_by_category(self, category: Optional[str]) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if not category:
            return self.products

        category_map = {
            "–∏–≥—Ä—ã": ["–∏–≥—Ä—ã", "–≥–µ–π–º–µ—Ä", "–∫–∏–±–µ—Ä—Å–ø–æ—Ä—Ç"],
            "–¥–∏–∑–∞–π–Ω": ["–¥–∏–∑–∞–π–Ω", "—Ñ–æ—Ç–æ", "—Ü–≤–µ—Ç", "–∫–∞–ª–∏–±—Ä"],
            "–æ—Ñ–∏—Å": ["–æ—Ñ–∏—Å", "—Ç–µ–∫—Å—Ç", "–¥–æ–∫—É–º–µ–Ω—Ç"]
        }

        keywords = category_map.get(category, [])
        return [
            p for p in self.products
            if any(kw in p['best_for'].lower() or kw in " ".join(p['tags']).lower() for kw in keywords)
        ]

class VoiceBot:
    def __init__(self):
        self.bot = Bot(token=TELEGRAM_TOKEN)
        self.dp = Dispatcher()
        self.neuro = ChatNeural(model_dir=MODEL_DIR)
        self.recognizer = sr.Recognizer()
        self._setup_handlers()
        self._check_dependencies()
        self.user_sessions = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    def _check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as tmp:
                test_file = tmp.name
            silent_audio = AudioSegment.silent(duration=100)
            silent_audio.export(test_file, format="ogg")
            AudioSegment.from_ogg(test_file)
            logger.info("FFmpeg —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        except Exception as e:
            logger.critical("FFmpeg –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ ffmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ PATH")
            raise RuntimeError("FFmpeg –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω") from e
        finally:
            try:
                if os.path.exists(test_file):
                    os.remove(test_file)
            except Exception as e:
                logger.warning(f"Error deleting test file: {e}")

    def _setup_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.dp.message(Command("start"))(self._handle_start)
        self.dp.message(Command("help"))(self._handle_help)
        self.dp.message(Command("products"))(self._handle_products)
        self.dp.message(Command("compare"))(self._handle_compare)
        self.dp.message(Command("promo"))(self._handle_promo)
        self.dp.callback_query()(self._handle_callback)
        self.dp.message(lambda m: m.content_type == ContentType.VOICE)(self._handle_voice)
        self.dp.message()(self._handle_text)

    async def _handle_start(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            await message.answer(
                "üñ•Ô∏è –Ø –±–æ—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∞–º\n\n"
                "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ –ò–≥—Ä–æ–≤–æ–π –º–æ–Ω–∏—Ç–æ—Ä –¥–æ 50 —Ç—ã—Å—è—á\n"
                "‚Ä¢ –õ—É—á—à–∏–π 4K –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–∞\n"
                "‚Ä¢ –°—Ä–∞–≤–Ω–∏—Ç–µ Dell –∏ ASUS 27 –¥—é–π–º–æ–≤\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/products - –≤—Å–µ –º–æ–¥–µ–ª–∏\n"
                "/compare - —Å—Ä–∞–≤–Ω–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä—ã\n"
                "/promo - –∞–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!"
            )
        except Exception as e:
            logger.error(f"Start command error: {e}", exc_info=True)

    async def _handle_help(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        await message.answer(
            "‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç:\n"
            "1. –£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–¥–æ 40 —Ç—ã—Å—è—á')\n"
            "2. –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ (–∏–≥—Ä—ã, –¥–∏–∑–∞–π–Ω, –æ—Ñ–∏—Å)\n"
            "3. –ñ–µ–ª–∞–µ–º—É—é –¥–∏–∞–≥–æ–Ω–∞–ª—å\n\n"
            "–ü—Ä–∏–º–µ—Ä: '–ù—É–∂–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä 27 –¥—é–π–º–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ, –±—é–¥–∂–µ—Ç 60 —Ç—ã—Å—è—á'"
        )

    async def _handle_products(self, message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
        try:
            builder = InlineKeyboardBuilder()

            for product in self.neuro.db.products:
                builder.button(
                    text=f"{product['name']} - {product['discount_price']:,}‚ÇΩ",
                    callback_data=f"product_{product['id']}"
                )

            builder.adjust(1)

            await message.answer(
                "üéÆ <b>–ù–∞—à–∏ —Ç–æ–ø–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤:</b>\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )

        except Exception as e:
            logger.error(f"Products command error: {e}", exc_info=True)
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö")

    async def _handle_compare(self, message: Message):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"""
        builder = InlineKeyboardBuilder()

        for product in self.neuro.db.products:
            builder.button(
                text=product['name'],
                callback_data=f"compare_{product['id']}"
            )

        builder.adjust(2)

        await message.answer(
            "üîç <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤</b>\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ 2 –º–æ–¥–µ–ª–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )

    async def _handle_promo(self, message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã"""
        promo_text = "üéÅ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:</b>\n\n"

        for product in self.neuro.db.products:
            promo_text += (
                f"<b>{product['name']}</b>\n"
                f"–ü—Ä–æ–º–æ–∫–æ–¥: <code>{product['promo_code']}</code>\n"
                f"–°–∫–∏–¥–∫–∞: {product['price'] - product['discount_price']:,}‚ÇΩ\n"
                f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {product['discount_price']:,}‚ÇΩ\n\n"
            )

        await message.answer(promo_text, parse_mode="HTML")

    async def _handle_callback(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ callback-–∑–∞–ø—Ä–æ—Å—ã"""
        try:
            data = callback.data

            if data.startswith("product_"):
                product_id = int(data.split("_")[1])
                await self._show_product_details(callback, product_id)

            elif data.startswith("compare_"):
                product_id = int(data.split("_")[1])
                await self._process_comparison(callback, product_id)

            elif data == "buy":
                await callback.message.answer("üõí –î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –æ–¥–∏–Ω –∏–∑ –º–∞–≥–∞–∑–∏–Ω–æ–≤:\n"
                                              "‚Ä¢ https://www.dns-shop.ru\n"
                                              "‚Ä¢ https://www.citilink.ru\n"
                                              "‚Ä¢ https://www.mvideo.ru")

            elif data.startswith("stores_"):
                product_id = int(data.split("_")[1])
                product = self.neuro.db.get_product_by_id(product_id)

                stores = "\n".join([f"‚Ä¢ {store}" for store in product['stores']])
                await callback.message.answer(
                    f"üè™ <b>–ì–¥–µ –∫—É–ø–∏—Ç—å {product['name']}:</b>\n\n"
                    f"{stores}\n\n"
                    f"–ü—Ä–æ–º–æ–∫–æ–¥: <code>{product['promo_code']}</code>",
                    parse_mode="HTML"
                )

            await callback.answer()

        except Exception as e:
            logger.error(f"Callback error: {e}", exc_info=True)
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    async def _show_product_details(self, callback: types.CallbackQuery, product_id: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
        product = self.neuro.db.get_product_by_id(product_id)
        if not product:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        features = "\n".join([f"‚Ä¢ {f}" for f in product["features"]])
        stores = ", ".join(product["stores"])

        text = (
            f"<b>{product['name']}</b>\n"
            f"ID: {product['id']}\n\n"
            f"<b>–¶–µ–Ω–∞:</b>\n"
            f"<s>{product['price']:,}‚ÇΩ</s> ‚Üí <b>{product['discount_price']:,}‚ÇΩ</b>\n"
            f"–ü—Ä–æ–º–æ–∫–æ–¥: <code>{product['promo_code']}</code>\n\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
            f"{product['description']}\n\n"
            f"<b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>\n"
            f"{features}\n\n"
            f"<b>–ì–¥–µ –∫—É–ø–∏—Ç—å:</b> {stores}"
        )

        builder = InlineKeyboardBuilder()
        builder.button(text="üõí –ö—É–ø–∏—Ç—å", callback_data="buy")
        builder.button(text="üè™ –ú–∞–≥–∞–∑–∏–Ω—ã", callback_data=f"stores_{product_id}")
        builder.button(text="üîç –°—Ä–∞–≤–Ω–∏—Ç—å", callback_data=f"compare_{product_id}")
        builder.adjust(2)

        try:
            if product.get('image'):
                image_path = IMAGES_DIR / product['image']
                if image_path.exists():
                    photo = FSInputFile(image_path)
                    await callback.message.answer_photo(
                        photo=photo,
                        caption=text,
                        reply_markup=builder.as_markup(),
                        parse_mode="HTML"
                    )
                    return

        except Exception as e:
            logger.error(f"Error sending photo: {e}")

        await callback.message.answer(
            text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )

    async def _process_comparison(self, callback: types.CallbackQuery, product_id: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"""
        try:
            user_id = callback.from_user.id

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in self.neuro.comparison_state:
                self.neuro.comparison_state[user_id] = {
                    'selected_ids': [],
                    'message_id': callback.message.message_id
                }

            # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
            if product_id not in self.neuro.comparison_state[user_id]['selected_ids']:
                self.neuro.comparison_state[user_id]['selected_ids'].append(product_id)

            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ 2 —Ç–æ–≤–∞—Ä–∞ - –≤—ã–ø–æ–ª–Ω—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            if len(self.neuro.comparison_state[user_id]['selected_ids']) >= 2:
                selected_ids = self.neuro.comparison_state[user_id]['selected_ids'][:2]
                comparison_text = self.neuro.compare_products(selected_ids)
                chart_path = self.neuro.generate_comparison_chart(selected_ids)

                if chart_path:
                    photo = FSInputFile(chart_path)
                    await callback.message.answer_photo(
                        photo=photo,
                        caption=comparison_text,
                        parse_mode="HTML"
                    )
                    os.remove(chart_path)
                else:
                    await callback.message.answer(comparison_text, parse_mode="HTML")

                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                del self.neuro.comparison_state[user_id]
            else:
                product = self.neuro.db.get_product_by_id(product_id)
                await callback.answer(f"–í—ã–±—Ä–∞–Ω {product['name']}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –º–æ–Ω–∏—Ç–æ—Ä –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")

        except Exception as e:
            logger.error(f"Comparison error: {e}", exc_info=True)
            await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ")
            if user_id in self.neuro.comparison_state:
                del self.neuro.comparison_state[user_id]

    async def _handle_voice(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        ogg_path, wav_path = None, None

        try:
            if message.voice.duration > 30:
                await message.reply("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 30 —Å–µ–∫—É–Ω–¥")
                return

            file = await self.bot.get_file(message.voice.file_id)
            ogg_path = f"temp_voice_{message.from_user.id}.ogg"
            await self.bot.download_file(file.file_path, ogg_path)

            wav_path = await self._convert_audio(ogg_path)
            if not wav_path:
                raise ValueError("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ")

            text = await self._transcribe_audio(wav_path)
            if not text:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")

            await self._process_voice_message(text, message)

        except Exception as e:
            logger.error(f"Voice processing failed: {e}", exc_info=True)
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

        finally:
            logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            for path in [ogg_path, wav_path]:
                try:
                    if path and os.path.exists(path):
                        os.remove(path)
                except Exception as e:
                    logger.warning(f"Error deleting {path}: {e}")

    async def _process_voice_message(self, text: str, message: Message) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Ç–≤–µ—á–∞–µ–º –≥–æ–ª–æ—Å–æ–º)"""
        try:
            if not text or not isinstance(text, str):
                raise ValueError("–ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–µ–∫—Å—Ç–∞")

            text = text.strip()
            if len(text) < 2:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –≤–æ–ø—Ä–æ—Å.")
                return False

            response = self.neuro.get_response(text)
            if not response:
                raise ValueError("–ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç")

            await self._send_voice_response(message, response)
            return True

        except Exception as e:
            logger.error(f"Voice processing error: {e}", exc_info=True)
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
            return False

    async def _process_text_message(self, text: str, message: Message) -> bool:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if not text or not isinstance(text, str):
                raise ValueError("–ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–µ–∫—Å—Ç–∞")

            text = text.strip()
            if len(text) < 2:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –≤–æ–ø—Ä–æ—Å.")
                return False

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                response = self.neuro.get_response(text)
            except Exception as e:
                logger.error(f"Model error: {e}", exc_info=True)
                response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

            if not response:
                response = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å."

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã
            await message.answer(response[:4000], parse_mode="HTML")
            return True

        except Exception as e:
            logger.error(f"Text processing error: {e}", exc_info=True)
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
            return False

    async def _handle_text(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not message.text:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return

        await self._process_text_message(message.text, message)

    async def _convert_audio(self, ogg_path: str) -> Optional[str]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è OGG –≤ WAV —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as tmp:
                wav_path = tmp.name

            audio = AudioSegment.from_ogg(ogg_path)
            audio.export(wav_path, format="wav")

            if os.path.getsize(wav_path) == 0:
                raise ValueError("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç")

            return wav_path

        except Exception as e:
            logger.error(f"Audio conversion error: {e}", exc_info=True)
            if 'wav_path' in locals() and os.path.exists(wav_path):
                os.remove(wav_path)
            return None

    async def _transcribe_audio(self, wav_path: str) -> Optional[str]:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            with sr.AudioFile(wav_path) as source:
                audio = self.recognizer.record(source)
                text = self.recognizer.recognize_google(audio, language="ru-RU")
                logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
                return text if text else None

        except sr.UnknownValueError:
            logger.warning("–†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
        except sr.RequestError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
        except Exception as e:
            logger.error(f"Transcription error: {e}", exc_info=True)
        return None

    async def _text_to_speech(self, text: str) -> Optional[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ñ–æ—Ä–º–∞—Ç .ogg)"""
        try:
            with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as tmp:
                output_path = tmp.name

            tts = gTTS(text=text, lang="ru", slow=False)
            tts.save(output_path)

            if os.path.getsize(output_path) == 0:
                raise ValueError("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –ø—É—Å—Ç")

            return output_path

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ TTS: {e}", exc_info=True)
            return None

    async def _send_voice_response(self, message: Message, text: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç"""
        voice_path = await self._text_to_speech(text)
        if not voice_path:
            return

        try:
            input_file = FSInputFile(voice_path, filename="response.ogg")
            await message.reply_voice(voice=input_file)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        finally:
            if os.path.exists(voice_path):
                os.remove(voice_path)

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("Starting bot...")
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.critical(f"Bot crashed: {e}", exc_info=True)
        finally:
            await self.bot.session.close()

if __name__ == "__main__":
    bot = VoiceBot()
    asyncio.run(bot.run())
